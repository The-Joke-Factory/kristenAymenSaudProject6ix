{"version":3,"sources":["JokeHeader.js","firebase.js","Vote.js","JokeEntry.js","RandomJoke.js","JokeFooter.js","VoteOldJoke.js","App.js","serviceWorker.js","index.js"],"names":["JokeHeader","className","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Vote","handleUpVote","jokeId","props","upVoteJoke","handleDownVote","downVoteJoke","sortArrayByDate","array","jokesArray","jokes","sort","jokeA","jokeB","jokeADate","Date","created_on","jokeBDate","sortArray","jokesGroup","totalVotesA","upvotes","downvotes","totalVotesB","addVoteColor","index","this","map","joke","totalVotes","key","id","author","onClick","icon","faThumbsUp","faThumbsDown","JokeEntry","newJokes","state","newJoke","database","ref","child","set","setState","handleChange","event","target","jokeInput","value","nameInput","submitForm","preventDefault","match","currentDate","toString","push","alert","on","snapshot","data","val","newJokesArray","propertyName","record","slice","onSubmit","action","htmlFor","onChange","minLength","maxLength","required","type","RandomJoke","randomJoke","isGeneratingJoke","onGenerateJoke","bind","fetch","headers","accept","then","response","json","generateJoke","disabled","JokeFooter","VoteOldJoke","submitDate","dbRef","newArray","filter","jokeDate","toISOString","substr","userDate","console","log","getDate","for","App","to","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a56e0abc.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass JokeHeader extends Component {\r\n  render() {\r\n    return (\r\n    <div className=\"appHead\">\r\n      <h2 className=\"dadJokesHead\">The Joke Factory</h2>\r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default JokeHeader;","import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\n\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyAsZzlfleBeT9bzHKQrOQS1ow9n4156J2o\",\r\n    authDomain: \"joke-generator-4248a.firebaseapp.com\",\r\n    databaseURL: \"https://joke-generator-4248a.firebaseio.com\",\r\n    projectId: \"joke-generator-4248a\",\r\n    storageBucket: \"joke-generator-4248a.appspot.com\",\r\n    messagingSenderId: \"250719953187\",\r\n    appId: \"1:250719953187:web:fea752e43d0798e812ec96\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\n\r\n\r\nexport default firebase;","import React, { Component } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faThumbsUp } from '@fortawesome/free-solid-svg-icons';\r\nimport { faThumbsDown } from '@fortawesome/free-solid-svg-icons';\r\n\r\nclass Vote extends Component {\r\n\r\n  // calling the function (upVoteJoke) to increment the joke at this specific id\r\n  handleUpVote = (jokeId) => {\r\n    this.props.upVoteJoke(jokeId);\r\n  }\r\n\r\n  // calling the function (downVoteJoke) to increment the joke at this specific id\r\n  handleDownVote = (jokeId) => {\r\n    this.props.downVoteJoke(jokeId);\r\n  }\r\n\r\n  sortArrayByDate = (array) => {\r\n    let jokesArray = [...this.props.jokes];\r\n    jokesArray.sort((jokeA, jokeB) => {\r\n      const jokeADate = new Date(jokeA.created_on);\r\n      const jokeBDate = new Date(jokeB.created_on);\r\n      if (jokeADate > jokeBDate) {\r\n        return -1;\r\n      } else if (jokeADate < jokeBDate) {\r\n        return 1;\r\n      } else {\r\n        return 0;\r\n      }\r\n    });\r\n    // console.log(jokesArray);\r\n    return jokesArray;\r\n  }\r\n\r\n\r\n  //sorting the array of jokes in descending order by total number of votes (upvotes - downvotes)\r\n  sortArray = () => {\r\n    \r\n    let jokesArray = [...this.props.jokes];\r\n    const jokesGroup = this.sortArrayByDate(jokesArray);\r\n    jokesGroup.sort((jokeA, jokeB) => {\r\n      const totalVotesA = jokeA.upvotes - jokeA.downvotes;\r\n      const totalVotesB = jokeB.upvotes - jokeB.downvotes;\r\n      if (totalVotesB < totalVotesA) {\r\n        return -1;\r\n      } else if (totalVotesB > totalVotesA) {\r\n        return 1;\r\n      } else {\r\n        return 0;\r\n      }\r\n    });\r\n    \r\n    return jokesGroup;\r\n  }\r\n\r\n  addVoteColor = (index) => {\r\n   if (index > 4) {\r\n     return \"jokeLeader4\";\r\n   } \r\n   return `jokeLeader${index}`;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"jokeBoard\">\r\n        <h2>Vote for which joke will stay, and which will go</h2>\r\n        <ul>\r\n          {\r\n            this.sortArray().map( (joke, index) => {\r\n              const totalVotes = joke.upvotes - joke.downvotes;\r\n              return ( \r\n                <div>\r\n                  <li key={joke.id} className={this.addVoteColor(index)} >\r\n                    {joke.author} {joke.joke} {joke.created_on}\r\n                    <button onClick={() => this.handleUpVote(joke.id)} id={joke.id}><FontAwesomeIcon icon={faThumbsUp} /></button>\r\n                    <button onClick={() => this.handleDownVote(joke.id)} id={joke.id}><FontAwesomeIcon icon={faThumbsDown} /></button> Total Votes: {totalVotes}\r\n                  </li>\r\n                </div>\r\n                )\r\n              }\r\n            )\r\n          }\r\n        </ul>  \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Vote;","import React, { Component } from 'react';\r\nimport firebase from './firebase';\r\nimport Vote from './Vote';\r\n// import { app } from 'firebase';\r\n\r\nclass JokeEntry extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { \r\n      jokes: [],\r\n      jokeInput: \"\",\r\n      nameInput: \"\"\r\n    };\r\n  }\r\n\r\n  // a function to increment the number of upvotes\r\n  upVoteJoke = (jokeId) => {\r\n    const newJokes = this.state.jokes.map( (joke) => {\r\n      if (joke.id != jokeId) {\r\n        return joke;\r\n      }\r\n      //update and create new joke array with new value for downvotes\r\n      const newJoke = {\r\n        id: jokeId,\r\n        author: joke.author,\r\n        joke: joke.joke,\r\n        created_on: joke.created_on,\r\n        upvotes: joke.upvotes + 1,\r\n        downvotes: joke.downvotes\r\n      };\r\n\r\n      // get the joke at this id\r\n      const jokeRef = firebase.database().ref(jokeId); \r\n\r\n      //update the upvotes property of this joke in firebase\r\n      jokeRef.child('upvotes').set(newJoke.upvotes);\r\n\r\n      return newJoke;\r\n    });\r\n\r\n    this.setState({jokes: newJokes});\r\n  }\r\n\r\n    //function to increment the number of downvotes on jokes \r\n  downVoteJoke = (jokeId) => {\r\n    const newJokes = this.state.jokes.map((joke) => {\r\n      if (joke.id != jokeId) {\r\n        return joke;\r\n      }\r\n      //update and create new joke array with new value for downvotes\r\n      const newJoke = {\r\n        id: joke.id,\r\n        author: joke.author,\r\n        joke: joke.joke,\r\n        created_on: joke.created_on,\r\n        upvotes: joke.upvotes,\r\n        downvotes: joke.downvotes + 1\r\n      };\r\n\r\n      // get the joke at this id\r\n      const jokeRef = firebase.database().ref(jokeId); \r\n\r\n      //update the downvotes property of this joke in firebase\r\n      jokeRef.child('downvotes').set(newJoke.downvotes);\r\n      return newJoke;\r\n    });\r\n\r\n    this.setState({ jokes: newJokes });\r\n  }\r\n\r\n  // pulling all jokes from firebase to display on page\r\n  componentDidMount() {\r\n    const dbRef = firebase.database().ref();\r\n    dbRef.on('value', (snapshot) => {\r\n      const data = snapshot.val();\r\n      const newJokesArray = [];\r\n\r\n      //restructuring data from firebase into our joke object in order to set state for jokes coming back from firebase\r\n      for (let propertyName in data) {\r\n        const record = data[propertyName];\r\n        const newJoke = {\r\n          id: propertyName,\r\n          author: record.author,\r\n          joke: record.joke,\r\n          created_on: record.created_on,\r\n          upvotes: record.upvotes,\r\n          downvotes: record.downvotes\r\n        }\r\n\r\n        // console.log(newJoke);\r\n        newJokesArray.push(newJoke)\r\n      }\r\n      \r\n      this.setState({\r\n\r\n        jokes: newJokesArray.slice(0, 10)\r\n      });\r\n    })\r\n  }\r\n\r\n  // function to grab user input in joke input field, and name input field\r\n  handleChange = (event) => {\r\n    if (event.target.id == \"newJoke\") {\r\n      this.setState({\r\n        jokeInput: event.target.value\r\n      }) \r\n    } else {\r\n      this.setState({\r\n        nameInput: event.target.value\r\n      })\r\n    }\r\n  }\r\n\r\n  // pushing data from joke form to firebase\r\n  submitForm = (event) => {\r\n    event.preventDefault();\r\n    // console.log(this.state.jokeInput);\r\n    if (!this.state.jokeInput.match(/^[a-z]+/gi) || !this.state.nameInput.match(/^[a-z]+/gi)){\r\n      alert(\"Please fill in all text fields\");\r\n      return;\r\n    }\r\n\r\n    const currentDate = new Date().toString();\r\n    // console.log(currentDate);\r\n    \r\n\r\n    const dbRef = firebase.database().ref();\r\n    dbRef.push({ author: this.state.nameInput, created_on: currentDate, joke: this.state.jokeInput, upvotes: 0, downvotes: 0 })\r\n\r\n    \r\n\r\n    \r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n\r\n         <form onSubmit={this.submitForm} action=\"submit\">\r\n            <label htmlFor=\"newJoke\">Got a joke? Let's hear it</label>\r\n            <textarea onChange={this.handleChange} minLength=\"6\" maxLength=\"200\" id=\"newJoke\" required/> \r\n            <label htmlFor=\"newJoke\">Who's posting? (incase it sucks)</label>\r\n            <input onChange={this.handleChange} maxLength=\"20\" type=\"text\" id=\"author\" required />       \r\n            <button className=\"addJokeBtn\">Add Joke</button>  \r\n          </form>\r\n          <Vote jokes={this.state.jokes} upVoteJoke={this.upVoteJoke} downVoteJoke={this.downVoteJoke}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default JokeEntry;","import React, { Component } from 'react';\r\n\r\nclass RandomJoke extends Component {\r\n    randomJoke = null;\r\n    \r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            //randomJoke = null,\r\n            isGeneratingJoke: false\r\n        };\r\n        this.onGenerateJoke = this.onGenerateJoke.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.onGenerateJoke();\r\n    }\r\n\r\n    \r\n\r\n    //generate a joke\r\n    generateJoke() {\r\n        this.setState({ isGeneratingJoke: true })\r\n\r\n        fetch(`//icanhazdadjoke.com/`, {\r\n            headers: {\r\n                accept: \"application/json\" //this will retrieve json data\r\n            }\r\n        })\r\n\r\n        .then(response => response.json())\r\n        .then(json => {\r\n            this.setState({\r\n                randomJoke: json.joke,\r\n                isGeneratingJoke: false\r\n            });\r\n        });\r\n    }\r\n\r\n    onGenerateJoke() {\r\n        this.generateJoke();\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"randomJokeContainer\">\r\n                <h1>Random Joke Generator</h1>\r\n                <button className=\"randomJokeBtn\" onClick={this.onGenerateJoke} disabled={this.state.isGeneratingJoke}>Tell me a joke</button>\r\n\r\n                <p className=\"randomJokeResult\">{this.state.isGeneratingJoke ? \"Generating random joke...\" : this.state.randomJoke}</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RandomJoke;\r\n","import React, { Component } from 'react';\r\n\r\nclass JokeFooter extends Component {\r\n  render() {\r\n    return (\r\n      <p>Copyright 2020</p>\r\n    )\r\n  }\r\n}\r\n\r\nexport default JokeFooter;","import React, { Component } from 'react';\r\nimport Vote from \"./Vote\";\r\nimport firebase from './firebase';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass VoteOldJoke extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    \r\n        this.state = { \r\n          jokes: [],\r\n          userDate: \"\",\r\n        };\r\n      }\r\n    \r\n      // a function to increment the number of upvotes\r\n      upVoteJoke = (jokeId) => {\r\n        const newJokes = this.state.jokes.map( (joke) => {\r\n          if (joke.id != jokeId) {\r\n            return joke;\r\n          }\r\n          //update and create new joke array with new value for downvotes\r\n          const newJoke = {\r\n            id: jokeId,\r\n            author: joke.author,\r\n            joke: joke.joke,\r\n            created_on: joke.created_on,\r\n            upvotes: joke.upvotes + 1,\r\n            downvotes: joke.downvotes\r\n          };\r\n    \r\n          // get the joke at this id\r\n          const jokeRef = firebase.database().ref(jokeId); \r\n\r\n    \r\n      //update the upvotes property of this joke in firebase\r\n      jokeRef.child('upvotes').set(newJoke.upvotes);\r\n\r\n      return newJoke;\r\n    });\r\n\r\n    this.setState({jokes: newJokes});\r\n  }\r\n\r\n    //function to increment the number of downvotes on jokes \r\n  downVoteJoke = (jokeId) => {\r\n    const newJokes = this.state.jokes.map((joke) => {\r\n      if (joke.id != jokeId) {\r\n        return joke;\r\n      }\r\n      //update and create new joke array with new value for downvotes\r\n      const newJoke = {\r\n        id: joke.id,\r\n        author: joke.author,\r\n        joke: joke.joke,\r\n        created_on: joke.created_on,\r\n        upvotes: joke.upvotes,\r\n        downvotes: joke.downvotes + 1\r\n      };\r\n\r\n      // get the joke at this id\r\n      const jokeRef = firebase.database().ref(jokeId); \r\n\r\n      //update the downvotes property of this joke in firebase\r\n      jokeRef.child('downvotes').set(newJoke.downvotes);\r\n      return newJoke;\r\n    });\r\n\r\n    this.setState({ jokes: newJokes });\r\n  }\r\n\r\n  // pulling all jokes from firebase to display on page\r\n \r\n\r\n  // function to grab user input in joke input field, and name input field\r\n \r\n\r\n  // pushing data from joke form to firebase\r\n \r\n   \r\n\r\n\r\n\r\n    submitDate = (event) => {\r\n        event.preventDefault();\r\n        this.setState({\r\n            jokes: []\r\n        })\r\n        const dbRef = firebase.database().ref();\r\n        const newJokesArray = [];\r\n        dbRef.on('value', (snapshot) => {\r\n          const data = snapshot.val();\r\n          \r\n            \r\n          //restructuring data from firebase into our joke object in order to set state for jokes coming back from firebase\r\n\r\n          for (let propertyName in data) {\r\n            const record = data[propertyName];\r\n            const newJoke = {\r\n              id: propertyName,\r\n              author: record.author,\r\n              joke: record.joke,\r\n              created_on: record.created_on,\r\n              upvotes: record.upvotes,\r\n              downvotes: record.downvotes\r\n            }\r\n    \r\n            // console.log(newJoke);\r\n            newJokesArray.push(newJoke)\r\n          }\r\n        //   console.log(this.state.userDate);\r\n            const newArray = newJokesArray.filter((joke) => {\r\n            \r\n            let jokeDate = new Date(joke.created_on)\r\n\r\n            jokeDate = jokeDate.toISOString().substr(0,10);\r\n            \r\n\r\n            // const month = jokeDate.getMonth()+1\r\n            // jokeDate = jokeDate.getFullYear()+\"-\"+jokeDate.getMonth()+\"-\"+jokeDate.getDate();\r\n            // jokeDate = Date.parse(this.state.userDate);\r\n            // console.log(jokeDate);\r\n            return jokeDate === this.state.userDate;\r\n            \r\n          }) \r\n          console.log(newArray)\r\n          this.setState({\r\n            jokes: newArray\r\n          });\r\n        })\r\n \r\n\r\n        \r\n        // const dbRef = firebase.database().ref();\r\n            \r\n        // dbRef.on('value', (snapshot) => {\r\n        \r\n    \r\n        //   let data = snapshot.val();\r\n    \r\n          \r\n        //   if (data === null) {\r\n        //     data=\"No current data on this year, check back later!\"\r\n        //   }\r\n    \r\n        //   this.setState({\r\n        //     facts: data\r\n        //   })\r\n        // })\r\n    \r\n        \r\n\r\n    }\r\n\r\n    getDate = (event) => {\r\n        this.setState({\r\n            userDate: event.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.submitDate}>\r\n                    <label for>Choose a date</label>\r\n                    <input onChange={this.getDate} type=\"date\"/>\r\n                    <button>Submit</button>\r\n                </form>\r\n                <Vote jokes={this.state.jokes} upVoteJoke={this.upVoteJoke} downVoteJoke={this.downVoteJoke}/>\r\n            </div>\r\n        )\r\n    }\r\n    }\r\n\r\n\r\nexport default VoteOldJoke;","import React, { Component } from 'react';\r\nimport JokeHeader from './JokeHeader';\r\nimport JokeEntry from './JokeEntry';\r\nimport RandomJoke from './RandomJoke';\r\nimport JokeFooter from './JokeFooter';\r\nimport VoteOldJoke from './VoteOldJoke'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route, Link } from 'react-router-dom';\r\n\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component {\r\n  \r\nrender() {\r\n    return (\r\n      <Router>\r\n      <div className=\"App\">\r\n        <div className=\"wrapper\">\r\n          <JokeHeader />\r\n\r\n          <Link to=\"/generateJoke\">Random Joke</Link>\r\n          <Link to=\"/jokeEntry\">Add Joke</Link>\r\n          <Link to=\"/voteForJoke\">Vote for a Joke</Link>\r\n          <Route exact path=\"/jokeEntry\" component={JokeEntry} />\r\n        \r\n          <Route exact path=\"/voteForJoke\" component={VoteOldJoke} />\r\n          <Route path=\"/generateJoke\" exact component={RandomJoke} />\r\n          <JokeFooter />\r\n        </div>\r\n      </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}