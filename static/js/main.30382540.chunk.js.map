{"version":3,"sources":["JokeHeader.js","firebase.js","Vote.js","JokeEntry.js","RandomJoke.js","JokeFooter.js","VoteOldJoke.js","App.js","serviceWorker.js","index.js"],"names":["JokeHeader","className","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Vote","handleUpVote","jokeId","props","upVoteJoke","handleDownVote","downVoteJoke","sortArray","jokesArray","jokes","sort","jokeA","jokeB","totalVotesA","upvotes","downvotes","totalVotesB","addVoteColor","index","this","parent","map","joke","totalVotes","key","id","created_on","author","onClick","icon","faThumbsUp","faThumbsDown","JokeEntry","newJokes","state","newJoke","database","ref","child","set","setState","handleChange","event","target","jokeInput","value","nameInput","submitForm","preventDefault","match","currentDate","Date","toDateString","push","alert","on","snapshot","data","val","newJokesArray","propertyName","record","reverse","slice","onSubmit","action","htmlFor","placeholder","onChange","rows","cols","minLength","maxLength","required","type","RandomJoke","randomJoke","isGeneratingJoke","onGenerateJoke","bind","axios","method","url","responseType","headers","Accept","then","res","generateJoke","disabled","JokeFooter","VoteOldJoke","getJokes","dbRef","newArray","userDate","filter","jokeDate","toISOString","substr","length","submitDate","getDate","resetForm","for","App","to","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.30382540.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass JokeHeader extends Component {\n  render() {\n    return (\n      <header>\n        <div className=\"appHead\">\n          <h1 className=\"dadJokesHead\">The Joke Factory</h1>\n        </div>\n      </header>\n    )\n  }\n}\n\nexport default JokeHeader;","import firebase from 'firebase/app';\nimport 'firebase/database';\n\n\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyAsZzlfleBeT9bzHKQrOQS1ow9n4156J2o\",\n    authDomain: \"joke-generator-4248a.firebaseapp.com\",\n    databaseURL: \"https://joke-generator-4248a.firebaseio.com\",\n    projectId: \"joke-generator-4248a\",\n    storageBucket: \"joke-generator-4248a.appspot.com\",\n    messagingSenderId: \"250719953187\",\n    appId: \"1:250719953187:web:fea752e43d0798e812ec96\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\n\n\nexport default firebase;","import React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faThumbsUp } from '@fortawesome/free-solid-svg-icons';\nimport { faThumbsDown } from '@fortawesome/free-solid-svg-icons';\n\nclass Vote extends Component {\n\n  // calling the function (upVoteJoke) to increment the joke at this specific id\n  handleUpVote = (jokeId) => {\n    this.props.upVoteJoke(jokeId);\n  }\n\n  // calling the function (downVoteJoke) to increment the joke at this specific id\n  handleDownVote = (jokeId) => {\n    this.props.downVoteJoke(jokeId);\n  }\n\n\n\n  // sorting the array of jokes in descending order by total number of votes (upvotes - downvotes)\n\n  sortArray = () => {\n    \n    let jokesArray = [...this.props.jokes];\n    jokesArray.sort((jokeA, jokeB) => {\n      const totalVotesA = jokeA.upvotes - jokeA.downvotes;\n      const totalVotesB = jokeB.upvotes - jokeB.downvotes;\n      if (totalVotesB < totalVotesA) {\n        return -1;\n      } else if (totalVotesB > totalVotesA) {\n        return 1;\n      } else {\n        return 0;\n      }\n    });\n    \n    return jokesArray;\n  }\n\n  addVoteColor = (index) => {\n  if (index > 4) {\n    return \"jokeLeader4\";\n  } \n  return `jokeLeader${index}`;\n  }\n\n  render() {\n    let jokesArray = [];\n    if (this.props.parent === \"jokeEntry\") {\n      jokesArray = this.props.jokes;\n    } else {\n      jokesArray = this.sortArray();\n    }\n\n    return (\n      <div className=\"jokeBoard\">\n        <h2>Rate which jokes are best!</h2>\n\n        <ul className=\"jokeContainer\">\n          {\n            jokesArray.map( (joke, index) => {\n              const totalVotes = joke.upvotes - joke.downvotes;\n              return ( \n                  <li key={joke.id} className={this.addVoteColor(index)} >\n                    <div className=\"cardWrapper\">\n                      <h2>{joke.created_on}</h2>\n                      <p>{joke.joke}</p>\n                    </div>\n\n                    <div className=\"jokeDetail\"> <p> By: {joke.author} </p> <p>Total Votes:{totalVotes}</p></div>\n\n                    <div className=\"buttonStyle\">\n                      <button onClick={() => this.handleUpVote(joke.id)} id={joke.id}><FontAwesomeIcon icon={faThumbsUp} /></button>\n                      <button onClick={() => this.handleDownVote(joke.id)} id={joke.id}><FontAwesomeIcon icon={faThumbsDown} /></button> \n                    </div>\n                  </li>\n                )\n              }\n            )\n          }\n        </ul> \n         \n      </div>\n    )\n  }\n}\n\nexport default Vote;","import React, { Component } from 'react';\nimport firebase from './firebase';\nimport Vote from './Vote';\n\nclass JokeEntry extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = { \n      jokes: [],\n      jokeInput: \"\",\n      nameInput: \"\"\n    };\n  }\n\n  // a function to increment the number of upvotes\n  upVoteJoke = (jokeId) => {\n    const newJokes = this.state.jokes.map( (joke) => {\n      if (joke.id !== jokeId) {\n        return joke;\n      }\n      //update and create new joke array with new value for downvotes\n      const newJoke = {\n        id: jokeId,\n        author: joke.author,\n        joke: joke.joke,\n        created_on: joke.created_on,\n        upvotes: joke.upvotes + 1,\n        downvotes: joke.downvotes\n      };\n\n      // get the joke at this id\n      const jokeRef = firebase.database().ref(jokeId); \n\n      //update the upvotes property of this joke in firebase\n      jokeRef.child('upvotes').set(newJoke.upvotes);\n\n      return newJoke;\n    });\n\n    this.setState({jokes: newJokes});\n  }\n\n    //function to increment the number of downvotes on jokes \n  downVoteJoke = (jokeId) => {\n    const newJokes = this.state.jokes.map((joke) => {\n      if (joke.id !== jokeId) {\n        return joke;\n      }\n      //update and create new joke array with new value for downvotes\n      const newJoke = {\n        id: joke.id,\n        author: joke.author,\n        joke: joke.joke,\n        created_on: joke.created_on,\n        upvotes: joke.upvotes,\n        downvotes: joke.downvotes + 1\n      };\n\n      // get the joke at this id\n      const jokeRef = firebase.database().ref(jokeId); \n\n      //update the downvotes property of this joke in firebase\n      jokeRef.child('downvotes').set(newJoke.downvotes);\n      return newJoke;\n    });\n\n    this.setState({ jokes: newJokes });\n  }\n\n  // pulling all jokes from firebase to display on page\n  componentDidMount() {\n    const dbRef = firebase.database().ref();\n    dbRef.on('value', (snapshot) => {\n      const data = snapshot.val();\n      const newJokesArray = [];\n\n      //restructuring data from firebase into our joke object in order to set state for jokes coming back from firebase\n      for (let propertyName in data) {\n        const record = data[propertyName];\n        const newJoke = {\n          id: propertyName,\n          author: record.author,\n          joke: record.joke,\n          created_on: record.created_on,\n          upvotes: record.upvotes,\n          downvotes: record.downvotes\n        }\n\n        newJokesArray.push(newJoke)\n      }\n      newJokesArray.reverse();\n      this.setState({\n\n        jokes: newJokesArray.slice(0, 12)\n      });\n    })\n  }\n\n  // function to grab user input in joke input field, and name input field\n  handleChange = (event) => {\n    if (event.target.id === \"newJoke\") {\n      this.setState({\n        jokeInput: event.target.value\n      }) \n    } else {\n      this.setState({\n        nameInput: event.target.value\n      })\n    }\n  }\n\n  // pushing data from joke form to firebase\n  submitForm = (event) => {\n    event.preventDefault();\n    if (!this.state.jokeInput.match(/^[a-z]+/gi) || !this.state.nameInput.match(/^[a-z]+/gi)){\n      alert(\"Please fill in all text fields\");\n      return;\n    }\n\n    const currentDate = new Date().toDateString();\n    \n\n    const dbRef = firebase.database().ref();\n    dbRef.push({ author: this.state.nameInput, created_on: currentDate, joke: this.state.jokeInput, upvotes: 0, downvotes: 0 })\n  }\n\n  \n  render() {\n    return (\n      <div>\n         <form onSubmit={this.submitForm} action=\"submit\">\n            <label htmlFor=\"newJoke\">Got a joke? Let's hear it</label>\n            <textarea placeholder=\"Input your joke here\" onChange={this.handleChange}  rows=\"5\" cols=\"50\" minLength=\"6\" maxLength=\"200\" id=\"newJoke\" required/> \n            <label htmlFor=\"newJoke\">Who's posting? (incase it sucks)</label>\n            <input placeholder=\"Input your name here\" onChange={this.handleChange} maxLength=\"20\" type=\"text\" id=\"author\" required />       \n            <button className=\"addJokeBtn\">Add Joke</button>  \n          </form>\n          <Vote parent=\"jokeEntry\" jokes={this.state.jokes} upVoteJoke={this.upVoteJoke} downVoteJoke={this.downVoteJoke}/>\n      </div>\n    )\n  }\n}\n\nexport default JokeEntry;","import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass RandomJoke extends Component {\n    randomJoke = null;\n    \n    constructor() {\n        super();\n        this.state = {\n            //randomJoke = null,\n            isGeneratingJoke: false\n        };\n        this.onGenerateJoke = this.onGenerateJoke.bind(this);\n    }\n\n    componentDidMount() {\n        this.onGenerateJoke();\n    }\n\n    //generate a joke\n    generateJoke() {\n        this.setState({ isGeneratingJoke: true })\n\n        axios({\n            method: 'GET',\n            url: 'https://icanhazdadjoke.com/',\n            responseType: 'json',\n            headers: {\n                Accept: \"application/json\" //this will retrieve json data\n            }\n        })\n        .then((res) => {\n            this.setState(\n                {\n                    randomJoke: res.data.joke,\n                    isGeneratingJoke: false\n                })\n        });\n    }\n\n    onGenerateJoke() {\n        this.generateJoke();\n    }\n\n    render() {\n        return(\n            <div className=\"randomJokeContainer\">\n                <h1>Random Joke Generator</h1>\n                <button className=\"randomJokeBtn\" onClick={this.onGenerateJoke} disabled={this.state.isGeneratingJoke}>Tell me a joke</button>\n\n                <p className=\"randomJokeResult\">{this.state.isGeneratingJoke ? \"Generating random joke...\" : this.state.randomJoke}</p>\n            </div>\n        )\n    }\n}\n\nexport default RandomJoke;\n\n","import React, { Component } from 'react';\n\nclass JokeFooter extends Component {\n  render() {\n    return (\n      <footer>\n        <p>Copyright © 2020</p>\n        <p>The Joke Factory: Aymen Mahmod, Saud Khoja, Kristen Scheel</p>\n      </footer>\n    )\n  }\n}\n\nexport default JokeFooter;","import React, { Component } from 'react';\nimport Vote from \"./Vote\";\nimport firebase from './firebase';\n\nclass VoteOldJoke extends Component {\n\n    constructor(props) {\n        super(props);\n    \n        this.state = { \n          jokes: [],\n          userDate: \"\",\n          \n        };\n      }\n\n      componentDidMount() {\n        this.getJokes();\n      }\n    \n      // a function to increment the number of upvotes\n      upVoteJoke = (jokeId) => {\n        const newJokes = this.state.jokes.map( (joke) => {\n          if (joke.id !== jokeId) {\n            return joke;\n          }\n          //update and create new joke array with new value for downvotes\n          const newJoke = {\n            id: jokeId,\n            author: joke.author,\n            joke: joke.joke,\n            created_on: joke.created_on,\n            upvotes: joke.upvotes + 1,\n            downvotes: joke.downvotes\n          };\n    \n          // get the joke at this id\n          const jokeRef = firebase.database().ref(jokeId); \n\n    \n      //update the upvotes property of this joke in firebase\n      jokeRef.child('upvotes').set(newJoke.upvotes);\n\n      return newJoke;\n    });\n\n    this.setState({jokes: newJokes});\n  }\n\n    //function to increment the number of downvotes on jokes \n  downVoteJoke = (jokeId) => {\n    const newJokes = this.state.jokes.map((joke) => {\n      if (joke.id !== jokeId) {\n        return joke;\n      }\n      //update and create new joke array with new value for downvotes\n      const newJoke = {\n        id: joke.id,\n        author: joke.author,\n        joke: joke.joke,\n        created_on: joke.created_on,\n        upvotes: joke.upvotes,\n        downvotes: joke.downvotes + 1\n      };\n\n      // get the joke at this id\n      const jokeRef = firebase.database().ref(jokeId); \n\n      //update the downvotes property of this joke in firebase\n      jokeRef.child('downvotes').set(newJoke.downvotes);\n      return newJoke;\n    });\n\n    this.setState({ jokes: newJokes });\n  }\n \n    getJokes = () => {\n        this.setState({\n            jokes: []\n        })\n        const dbRef = firebase.database().ref();\n        const newJokesArray = [];\n        dbRef.on('value', (snapshot) => {\n          const data = snapshot.val();\n\n            \n          //restructuring data from firebase into our joke object in order to set state for jokes coming back from firebase\n\n          for (let propertyName in data) {\n            const record = data[propertyName];\n            const newJoke = {\n              id: propertyName,\n              author: record.author,\n              joke: record.joke,\n              created_on: record.created_on,\n              upvotes: record.upvotes,\n              downvotes: record.downvotes\n            }\n    \n            newJokesArray.push(newJoke)\n          }\n\n        let newArray = newJokesArray;\n        if (this.state.userDate !== \"\") {\n            newArray = newJokesArray.filter((joke) => {\n            let jokeDate = new Date(joke.created_on)\n            jokeDate = jokeDate.toISOString().substr(0,10);\n            return jokeDate === this.state.userDate;\n            }) \n        }\n\n        if (newArray.length === 0) {\n            alert(\"Theres no jokes for this day -- select another day\");\n        }\n\n        this.setState({\n            jokes: newArray\n          });\n        })\n    }\n\n\n    submitDate = (event) => {\n        event.preventDefault();\n        this.getJokes();\n    }\n\n    getDate = (event) => {\n        this.setState({\n            userDate: event.target.value\n        })\n    }\n\n    resetForm = (event) => {        \n        this.setState({\n            userDate: \"\",\n        }, () => {\n            this.getJokes();\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"randomOtherContainer\">\n                <form onSubmit={this.submitDate}>\n                    <label for>Choose a date</label>\n                    <input onChange={this.getDate} type=\"date\"/>\n                    <button type=\"submit\">Submit</button>\n                    <button onClick={this.resetForm} type=\"reset\">Back to Leaderboard</button>\n                </form>\n                <Vote parent=\"voteOldJoke\" jokes={this.state.jokes} upVoteJoke={this.upVoteJoke} downVoteJoke={this.downVoteJoke}/>\n            </div>\n        )\n    }\n    }\n\n\nexport default VoteOldJoke;","import React, { Component } from 'react';\nimport JokeHeader from './JokeHeader';\nimport JokeEntry from './JokeEntry';\nimport RandomJoke from './RandomJoke';\nimport JokeFooter from './JokeFooter';\nimport VoteOldJoke from './VoteOldJoke'\nimport {\n  BrowserRouter as Router,\n  Route, Link } from 'react-router-dom';\nimport './App.css';\n\n\nclass App extends Component {\n\nrender() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"wrapper\">\n            <JokeHeader />\n            <header>\n              <nav>\n                <ul>\n                  <li>\n                    <Link to=\"/generateJoke\">Random Joke</Link>\n                  </li>\n                  <li>\n                    <Link to=\"/kristenAymenSaudProject6ix\">Add Joke</Link>\n                  </li>\n                  <li>\n                    <Link to=\"/voteForJoke\">Vote for a Joke</Link>\n                  </li>\n                </ul>\n              </nav>\n            </header>\n            <Route exact path=\"/kristenAymenSaudProject6ix\" component={JokeEntry} />\n            <Route exact path=\"/voteForJoke\" component={VoteOldJoke} />\n            <Route path=\"/generateJoke\" exact component={RandomJoke} />\n            <JokeFooter />\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}