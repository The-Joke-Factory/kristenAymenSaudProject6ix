{"version":3,"sources":["firebase.js","JokeHeader.js","JokeEntry.js","Vote.js","RandomJoke.js","JokeFooter.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","JokeHeader","className","Component","JokeEntry","Vote","handleUpVote","jokeId","props","upVoteJoke","handleDownVote","downVoteJoke","sortArray","jokesArray","jokes","sort","jokeA","jokeB","totalVotesA","upvotes","downvotes","totalVotesB","addVoteColor","index","this","map","joke","totalVotes","key","id","author","created_on","onClick","icon","faThumbsUp","faThumbsDown","RandomJoke","randomJoke","state","isGeneratingJoke","onGenerateJoke","bind","setState","fetch","headers","accept","then","response","json","generateJoke","disabled","JokeFooter","App","newJokes","newJoke","database","ref","child","set","handleChange","event","target","jokeInput","value","nameInput","handleClick","preventDefault","push","on","snapshot","data","val","newJokesArray","propertyName","record","action","htmlFor","onChange","type","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1045a5ca.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/database';\n\n\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyAsZzlfleBeT9bzHKQrOQS1ow9n4156J2o\",\n    authDomain: \"joke-generator-4248a.firebaseapp.com\",\n    databaseURL: \"https://joke-generator-4248a.firebaseio.com\",\n    projectId: \"joke-generator-4248a\",\n    storageBucket: \"joke-generator-4248a.appspot.com\",\n    messagingSenderId: \"250719953187\",\n    appId: \"1:250719953187:web:fea752e43d0798e812ec96\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\n\n\nexport default firebase;","import React, { Component } from 'react';\n\nclass JokeHeader extends Component {\n  render() {\n    return (\n    <div className=\"appHead\">\n      <h2 className=\"dadJokesHead\">Dad Jokes!</h2>\n    </div>\n    )\n  }\n}\n\nexport default JokeHeader;","import React, { Component } from 'react';\n\nclass JokeEntry extends Component {\n  render() {\n    return (\n      <h2></h2>\n    )\n  }\n}\n\nexport default JokeEntry;","import React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faThumbsUp } from '@fortawesome/free-solid-svg-icons';\nimport { faThumbsDown } from '@fortawesome/free-solid-svg-icons';\n\nclass Vote extends Component {\n\n  // calling the function (upVoteJoke) to increment the joke at this specific id\n  handleUpVote = (jokeId) => {\n    this.props.upVoteJoke(jokeId);\n  }\n\n  // calling the function (downVoteJoke) to increment the joke at this specific id\n  handleDownVote = (jokeId) => {\n    this.props.downVoteJoke(jokeId);\n  }\n\n  //sorting the array of jokes in descending order by total number of votes (upvotes - downvotes)\n  sortArray = () => {\n    let jokesArray = [...this.props.jokes];\n    jokesArray.sort((jokeA, jokeB) => {\n      const totalVotesA = jokeA.upvotes - jokeA.downvotes;\n      const totalVotesB = jokeB.upvotes - jokeB.downvotes;\n      if (totalVotesB < totalVotesA) {\n        return -1;\n      } else if (totalVotesB > totalVotesA) {\n        return 1;\n      } else {\n        return 0;\n      }\n    });\n    return jokesArray;\n  }\n\n  addVoteColor = (index) => {\n   if (index > 4) {\n     return \"jokeLeader4\";\n   } \n   return `jokeLeader${index}`;\n  }\n\n  render() {\n    return (\n      <div className=\"jokeBoard\">\n        <h2>Vote for which joke will stay, and which will go</h2>\n        <ul>\n          {\n            this.sortArray().map( (joke, index) => {\n              const totalVotes = joke.upvotes - joke.downvotes;\n              return ( \n                <div>\n                  <li key={joke.id} className={this.addVoteColor(index)} >\n                    {joke.author} {joke.joke} {joke.created_on}\n                    <button onClick={() => this.handleUpVote(joke.id)} id={joke.id}><FontAwesomeIcon icon={faThumbsUp} /></button>\n                    <button onClick={() => this.handleDownVote(joke.id)} id={joke.id}><FontAwesomeIcon icon={faThumbsDown} /></button> Total Votes: {totalVotes}\n                  </li>\n                </div>\n                )\n              }\n            )\n          }\n        </ul>  \n      </div>\n    )\n  }\n}\n\nexport default Vote;","import React, { Component } from 'react';\n\nclass RandomJoke extends Component {\n    randomJoke = null;\n    \n    constructor() {\n        super();\n        this.state = {\n            //randomJoke = null,\n            isGeneratingJoke: false\n        };\n        this.onGenerateJoke = this.onGenerateJoke.bind(this);\n    }\n\n    componentDidMount() {\n        this.onGenerateJoke();\n    }\n\n    //generate a joke\n    generateJoke() {\n        this.setState({ isGeneratingJoke: true })\n\n        fetch(`//icanhazdadjoke.com/`, {\n            headers: {\n                accept: \"application/json\" //this will retrieve json data\n            }\n        })\n\n        .then(response => response.json())\n        .then(json => {\n            this.setState({\n                randomJoke: json.joke,\n                isGeneratingJoke: false\n            });\n        });\n    }\n\n    onGenerateJoke() {\n        this.generateJoke();\n    }\n\n    render() {\n        return(\n            <div className=\"randomJokeContainer\">\n                <h1>Random Joke Generator</h1>\n                <button className=\"randomJokeBtn\" onClick={this.onGenerateJoke} disabled={this.state.isGeneratingJoke}>Tell me a joke</button>\n\n                <p className=\"randomJokeResult\">{this.state.isGeneratingJoke ? \"Generating random joke...\" : this.state.randomJoke}</p>\n            </div>\n        )\n    }\n}\n\nexport default RandomJoke;\n","import React, { Component } from 'react';\n\nclass JokeFooter extends Component {\n  render() {\n    return (\n      <p>Copyright 2020</p>\n    )\n  }\n}\n\nexport default JokeFooter;","import React, { Component } from 'react';\nimport firebase from './firebase';\nimport JokeHeader from './JokeHeader';\nimport JokeEntry from './JokeEntry';\nimport Vote from './Vote';\nimport RandomJoke from './RandomJoke';\nimport JokeFooter from './JokeFooter';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { \n      jokes: [],\n      jokeInput: \"\",\n      nameInput: \"\"\n    };\n  }\n\n  // a function to increment the number of upvotes\n  upVoteJoke = (jokeId) => {\n    const newJokes = this.state.jokes.map( (joke) => {\n      if (joke.id != jokeId) {\n        return joke;\n      }\n      //update and create new joke array with new value for downvotes\n      const newJoke = {\n        id: jokeId,\n        author: joke.author,\n        joke: joke.joke,\n        created_on: joke.created_on,\n        upvotes: joke.upvotes + 1,\n        downvotes: joke.downvotes\n      };\n\n      // get the joke at this id\n      const jokeRef = firebase.database().ref(jokeId); \n\n      //update the upvotes property of this joke in firebase\n      jokeRef.child('upvotes').set(newJoke.upvotes);\n\n      return newJoke;\n    });\n\n    this.setState({jokes: newJokes});\n  }\n\n    //function to increment the number of downvotes on jokes \n  downVoteJoke = (jokeId) => {\n    const newJokes = this.state.jokes.map((joke) => {\n      if (joke.id != jokeId) {\n        return joke;\n      }\n      //update and create new joke array with new value for downvotes\n      const newJoke = {\n        id: joke.id,\n        author: joke.author,\n        joke: joke.joke,\n        created_on: joke.created_on,\n        upvotes: joke.upvotes,\n        downvotes: joke.downvotes + 1\n      };\n\n      // get the joke at this id\n      const jokeRef = firebase.database().ref(jokeId); \n\n      //update the downvotes property of this joke in firebase\n      jokeRef.child('downvotes').set(newJoke.downvotes);\n      return newJoke;\n    });\n\n    this.setState({ jokes: newJokes });\n  }\n\n  // pulling all jokes from firebase to display on page\n  componentDidMount() {\n    const dbRef = firebase.database().ref();\n    dbRef.on('value', (snapshot) => {\n      const data = snapshot.val();\n      const newJokesArray = [];\n\n      //restructuring data from firebase into our joke object in order to set state for jokes coming back from firebase\n      for (let propertyName in data) {\n        const record = data[propertyName];\n        const newJoke = {\n          id: propertyName,\n          author: record.author,\n          joke: record.joke,\n          created_on: record.created_on,\n          upvotes: record.upvotes,\n          downvotes: record.downvotes\n        }\n        newJokesArray.push(newJoke)\n      }\n      this.setState({\n        jokes: newJokesArray\n      });\n    })\n  }\n\n  // function to grab user input in joke input field, and name input field\n  handleChange = (event) => {\n    if (event.target.id == \"newJoke\") {\n      this.setState({\n        jokeInput: event.target.value\n      }) \n    } else {\n      this.setState({\n        nameInput: event.target.value\n      })\n    }\n  }\n\n  // pushing data from joke form to firebase\n  handleClick = (event) => {\n    event.preventDefault();\n    const dbRef = firebase.database().ref();\n    dbRef.push({ author: this.state.nameInput, joke: this.state.jokeInput, upvotes: 0, downvotes: 0 })\n  }\n\nrender() {\n    return (\n      <div className=\"App\">\n        <div className=\"wrapper\">\n          <JokeHeader />\n          <JokeEntry />\n          <form action=\"submit\">\n            <label htmlFor=\"newJoke\">Got a joke? Let's hear it</label>\n            <input onChange={this.handleChange} type=\"text\" id=\"newJoke\"/> \n            <label htmlFor=\"newJoke\">Who's posting? (incase it sucks)</label>\n            <input onChange={this.handleChange} type=\"text\" id=\"author\" />       \n            <button className=\"addJokeBtn\" onClick={this.handleClick}>Add Joke</button>  \n          </form>\n          <Vote jokes={this.state.jokes} upVoteJoke={this.upVoteJoke} downVoteJoke={this.downVoteJoke}/>\n          <RandomJoke />\n          <JokeFooter />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}